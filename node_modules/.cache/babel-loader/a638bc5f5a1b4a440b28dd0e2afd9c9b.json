{"ast":null,"code":"export const PROB_INFECTION = 0.3;\nexport const PROB_INFECTION_DECAY = 0.9;\nexport const getNextStateOfWorld = currentState => {// currentState is an object consisting of\n  // People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n  // \n};\nexport const makePerson = (initName, initHealth, initInfected, initImmune) => {\n  const name = initName ? initName : \"John\"; // health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\n  const health = initHealth ? initHealth : 0; // infected is a boolean indicating whether person is infected \n\n  const infected = !!initInfected ? true : false; // immune is a boolean indicating whether person is immune \n\n  const immune = !!initImmune ? true : false;\n  return {\n    name: name,\n    health: health,\n    infected: infected,\n    immunue: immune,\n    calcInfected: (neighbors, distancing) => {\n      // neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n      // distancing is a constant >= 1\n      let probNotInfected = 1;\n      Object.keys(neighbors).forEach(neighborTier => {\n        const numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n        probNotInfected = probNotInfected * Math.pow(1 - PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY, neighborTier) / distancing, numNeighbors);\n      });\n      console.log(name + \"'s chance of getting infected = \" + (1 - probNotInfected));\n      return Math.random() < probNotInfected;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/Simulate.js"],"names":["PROB_INFECTION","PROB_INFECTION_DECAY","getNextStateOfWorld","currentState","makePerson","initName","initHealth","initInfected","initImmune","name","health","infected","immune","immunue","calcInfected","neighbors","distancing","probNotInfected","Object","keys","forEach","neighborTier","numNeighbors","filter","neighbor","length","Math","pow","console","log","random"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,GAAvB;AACP,OAAO,MAAMC,oBAAoB,GAAG,GAA7B;AAGP,OAAO,MAAMC,mBAAmB,GAAIC,YAAD,IAAkB,CACpD;AACA;AACA;AAEA,CALM;AAOP,OAAO,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAUC,UAAV,EAAqBC,YAArB,EAAkCC,UAAlC,KAAiD;AAC1E,QAAMC,IAAI,GAAGJ,QAAQ,GAAGA,QAAH,GAAc,MAAnC,CAD0E,CAG1E;;AACA,QAAMK,MAAM,GAAGJ,UAAU,GAAEA,UAAF,GAAe,CAAxC,CAJ0E,CAM1E;;AACA,QAAMK,QAAQ,GAAG,CAAC,CAACJ,YAAF,GAAiB,IAAjB,GAAwB,KAAzC,CAP0E,CAS1E;;AACA,QAAMK,MAAM,GAAG,CAAC,CAACJ,UAAF,GAAe,IAAf,GAAsB,KAArC;AAGA,SAAO;AACNC,IAAAA,IAAI,EAAEA,IADA;AAENC,IAAAA,MAAM,EAAEA,MAFF;AAGNC,IAAAA,QAAQ,EAAEA,QAHJ;AAINE,IAAAA,OAAO,EAAED,MAJH;AAKNE,IAAAA,YAAY,EAAE,CAACC,SAAD,EAAWC,UAAX,KAA0B;AACvC;AACA;AAEA,UAAIC,eAAe,GAAG,CAAtB;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,OAAvB,CAA+BC,YAAY,IAAI;AAC9C,cAAMC,YAAY,GAAGP,SAAS,CAACM,YAAD,CAAT,CAAwBE,MAAxB,CAA+BC,QAAQ,IAAIA,QAAQ,CAACb,QAApD,EAA8Dc,MAAnF;AACAR,QAAAA,eAAe,GAAGA,eAAe,GAC9BS,IAAI,CAACC,GAAL,CAAU,IAAI3B,cAAc,GAAG0B,IAAI,CAACC,GAAL,CAAS1B,oBAAT,EAA8BoB,YAA9B,CAAjB,GAA+DL,UAA7E,EAA2FM,YAA3F,CADH;AAEA,OAJD;AAMAM,MAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAI,GAAG,kCAAP,IAA6C,IAAEQ,eAA/C,CAAZ;AAEA,aAAOS,IAAI,CAACI,MAAL,KAAgBb,eAAvB;AACA;AAnBK,GAAP;AAqBA,CAlCM","sourcesContent":["export const PROB_INFECTION = 0.3\nexport const PROB_INFECTION_DECAY = 0.9\n\n\nexport const getNextStateOfWorld = (currentState) => {\n\t// currentState is an object consisting of\n\t// People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n\t// \n\n}\n\nexport const makePerson = (initName,initHealth,initInfected,initImmune) => {\n\tconst name = initName ? initName : \"John\";\n\t\n\t// health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\tconst health = initHealth? initHealth : 0;\n\t\n\t// infected is a boolean indicating whether person is infected \n\tconst infected = !!initInfected ? true : false;\n\t\n\t// immune is a boolean indicating whether person is immune \n\tconst immune = !!initImmune ? true : false;\n\n\n\treturn {\n\t\tname: name,\n\t\thealth: health,\n\t\tinfected: infected,\n\t\timmunue: immune,\n\t\tcalcInfected: (neighbors,distancing) => {\n\t\t\t// neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n\t\t\t// distancing is a constant >= 1\n\n\t\t\tlet probNotInfected = 1;\n\t\t\tObject.keys(neighbors).forEach(neighborTier => {\n\t\t\t\tconst numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n\t\t\t\tprobNotInfected = probNotInfected \n\t\t\t\t\t* Math.pow( 1- (PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY,neighborTier) / distancing) , numNeighbors )\n\t\t\t})\n\n\t\t\tconsole.log(name + \"'s chance of getting infected = \" + (1-probNotInfected));\n\n\t\t\treturn Math.random() < probNotInfected;\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}