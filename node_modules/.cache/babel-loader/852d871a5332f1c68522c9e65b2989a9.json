{"ast":null,"code":"import { cloneElement } from \"react\";\nexport const PROB_INFECTION = 0.7;\nexport const PROB_INFECTION_DECAY = 0.9;\nexport const INCUBATION_PERIOD = 50;\nexport const randInt = maximum => Math.floor(Math.random() * (maximum - 0 + 1)) + 0;\nexport const newWorld = (width, numInfected) => {\n  const world = {\n    People: [...Array(width).keys()].map(x => [...Array(width).keys()].map(y => {\n      return makePerson({\n        initX: x,\n        initY: y\n      });\n    })),\n    infections: {\n      infected: numInfected,\n      notInfected: width * width - numInfected\n    }\n  };\n\n  if (numInfected) {\n    let infectedPicks = [];\n\n    while (infectedPicks.length < numInfected) {\n      const newRand = randInt(width * width);\n\n      if (!(newRand in infectedPicks)) {\n        infectedPicks.push(newRand);\n      }\n    }\n\n    console.log(infectedPicks);\n    infectedPicks.forEach(pick => world.People[Math.floor(pick / width)][pick % width].infected = true);\n  }\n\n  return world;\n};\nexport const getNextStateOfWorld = (currentState, neighborAddresses) => {\n  // currentState is an object consisting of\n  // People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n  // \n  const width = currentState.People.length;\n  const People = currentState.People; // console.log(People);\n\n  const newInfected = [];\n  People.forEach((col, x) => {\n    newInfected[x] = [];\n    col.forEach((row, y) => {\n      const neighbors = getNeighborsForPerson(People[x][y], People, neighborAddresses); // console.log(neighbors);\n\n      newInfected[x][y] = People[x][y].calcInfected(neighbors, 4, People[x][y].infectedDays);\n    });\n  }); // console.log(newInfected);\n\n  currentState.infections = {\n    infected: 0,\n    notInfected: 0\n  };\n  People.forEach((col, x) => {\n    col.forEach((row, y) => {\n      People[x][y].infected = newInfected[x][y];\n\n      if (newInfected[x][y]) {\n        currentState.infections.infected++;\n        People[x][y].infectedDays++;\n      } else currentState.infections.notInfected++;\n    });\n  });\n  return {\n    People: People,\n    infections: currentState.infections\n  };\n};\nexport const getNeighborsForPerson = (person, AllPeople, neighborAddresses) => {\n  // console.log(person);\n  // console.log(neighborAddresses);\n  return {\n    0: neighborAddresses[person.x][person.y][0].map(address => {\n      return AllPeople[address[0]][address[1]];\n    })\n  };\n};\nexport const getAllNeighbors = width => {\n  const l = width - 1; // last index\n\n  return [...Array(width).keys()].map(x => [...Array(width).keys()].map(y => {\n    if (x < l && y < l && x > 0 && y > 0) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (x === 0 && y === 0) return {\n      0: [[1, 0], [1, 1], [0, 1]]\n    };\n    if (x === 0 && y === l) return {\n      0: [[0, l - 1], [1, l - 1], [1, l]]\n    };\n    if (x === l && y === 0) return {\n      0: [[l - 1, 0], [l - 1, 1], [l, 1]]\n    };\n    if (x === l && y === l) return {\n      0: [[l - 1, l - 1], [l - 1, l], [l, l - 1]]\n    };\n    if (x === 0) return {\n      0: [[x, y - 1], [x + 1, y - 1], [x + 1, y], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (y === 0) return {\n      0: [[x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (x === l) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1]]\n    };\n    if (y === l) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y]]\n    };\n  })); // return neighborsByCoords;\n};\nexport const makePerson = properties => {\n  const {\n    initName,\n    initX,\n    initY,\n    initHealth,\n    initInfected,\n    initImmune\n  } = properties;\n  const name = initName ? initName : \"John\"; // health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\n  const health = initHealth ? initHealth : 0; // infected is a boolean indicating whether person is infected \n\n  const infected = initInfected ? initInfected : false; // immune is a boolean indicating whether person is immune \n\n  const immune = initImmune ? initImmune : false;\n  const x = initX ? initX : 0;\n  const y = initY ? initY : 0;\n  return {\n    name: name,\n    x: x,\n    y: y,\n    health: health,\n    infected: infected,\n    infectedDays: 0,\n    immunue: immune,\n    calcInfected: (neighbors, distancing, infectedDays) => {\n      // neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n      // distancing is a constant >= 1\n      // console.log(neighbors);\n      let probNotInfected = 1;\n      Object.keys(neighbors).forEach(neighborTier => {\n        const numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length; // console.log(numNeighbors);\n\n        probNotInfected = probNotInfected * Math.pow(1 - PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY, neighborTier) / distancing, numNeighbors);\n      }); // console.log(name + \"'s chance of getting infected = \" + (1-probNotInfected));\n\n      if (infectedDays === 0) return Math.random() > probNotInfected;else if (infectedDays >= INCUBATION_PERIOD) return false;else return true;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/Simulate.js"],"names":["cloneElement","PROB_INFECTION","PROB_INFECTION_DECAY","INCUBATION_PERIOD","randInt","maximum","Math","floor","random","newWorld","width","numInfected","world","People","Array","keys","map","x","y","makePerson","initX","initY","infections","infected","notInfected","infectedPicks","length","newRand","push","console","log","forEach","pick","getNextStateOfWorld","currentState","neighborAddresses","newInfected","col","row","neighbors","getNeighborsForPerson","calcInfected","infectedDays","person","AllPeople","address","getAllNeighbors","l","properties","initName","initHealth","initInfected","initImmune","name","health","immune","immunue","distancing","probNotInfected","Object","neighborTier","numNeighbors","filter","neighbor","pow"],"mappings":"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","sourcesContent":["import { cloneElement } from \"react\";\n\nexport const PROB_INFECTION = 0.7;\nexport const PROB_INFECTION_DECAY = 0.9;\nexport const INCUBATION_PERIOD = 50;\n\nexport const randInt = (maximum) =>  Math.floor(Math.random() * (maximum - 0 + 1)) + 0;\n\nexport const newWorld = (width,numInfected) => {\n\tconst world = {\n\t\tPeople: [...Array(width).keys()].map(x =>\n\t\t\t\t[...Array(width).keys()].map(y => {\n\t\t\t\t\treturn makePerson({initX:x,initY:y})\n\t\t\t\t})\n\t\t\t),\n\t\tinfections: {infected: numInfected, notInfected: width*width-numInfected}\n\t}\n\t\n\tif (numInfected) {\n\t\tlet infectedPicks = [];\n\t\twhile (infectedPicks.length < numInfected) {\n\t\t\tconst newRand = randInt(width*width)\n\t\t\tif (!(newRand in infectedPicks)) {\n\t\t\t\tinfectedPicks.push(newRand);\n\t\t\t}\n\t\t}\n\t\tconsole.log(infectedPicks);\n\t\tinfectedPicks.forEach(pick => world.People[Math.floor(pick/width)][pick%width].infected = true);\n\t}\n\treturn world;\n}\n\nexport const getNextStateOfWorld = (currentState,neighborAddresses) => {\n\t// currentState is an object consisting of\n\t// People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n\t// \n\n\tconst width = currentState.People.length;\n\tconst People = currentState.People;\n\n\t// console.log(People);\n\tconst newInfected = [];\n\n\tPeople.forEach((col,x) => {\n\t\tnewInfected[x] = [];\n\t\tcol.forEach((row,y) => {\n\t\t\tconst neighbors = getNeighborsForPerson(People[x][y],People,neighborAddresses);\n\t\t\t// console.log(neighbors);\n\t\t\tnewInfected[x][y] = People[x][y].calcInfected(neighbors,4,People[x][y].infectedDays);\n\t\t})\n\t})\n\n\t// console.log(newInfected);\n\n\tcurrentState.infections = {infected:0,notInfected:0};\n\tPeople.forEach((col,x) => {\n\t\tcol.forEach((row,y) => {\n\t\t\tPeople[x][y].infected = newInfected[x][y];\n\t\t\tif (newInfected[x][y]) { \n\t\t\t\tcurrentState.infections.infected++;\n\t\t\t\tPeople[x][y].infectedDays++;\n\t\t\t}\n\t\t\telse currentState.infections.notInfected++;\n\t\t})\n\t})\n\n\treturn {People:People,infections:currentState.infections}\n}\n\nexport const getNeighborsForPerson = (person,AllPeople,neighborAddresses) => {\n\t// console.log(person);\n\t// console.log(neighborAddresses);\n\treturn {\n\t\t0: neighborAddresses[person.x][person.y][0].map(address => {\n\t\t\t\treturn AllPeople[address[0]][address[1]];\n\t\t\t})\n\t};\n}\n\nexport const getAllNeighbors = (width) => {\n\tconst l = width-1; // last index\n\treturn [...Array(width).keys()].map(x =>\n\t\t[...Array(width).keys()].map(y => {\n\t\t\tif (x < l && y < l && x > 0 && y > 0 ) return {0:[[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]]};\n\t\t\tif (x === 0 && y === 0) return {0:[[1,0],[1,1],[0,1]]};  \n\t\t\tif (x === 0 && y === l) return {0:[[0,l-1],[1,l-1],[1,l]]};  \n\t\t\tif (x === l && y === 0) return {0:[[l-1,0],[l-1,1],[l,1]]};  \n\t\t\tif (x === l && y === l) return {0:[[l-1,l-1],[l-1,l],[l,l-1]]};  \n\t\t\tif (x === 0) return {0:[[x,y-1],[x+1,y-1],[x+1,y],[x,y+1],[x+1,y+1]]};\n\t\t\tif (y === 0) return {0:[[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]]};\n\t\t\tif (x === l) return {0:[[x-1,y-1],[x,y-1],[x-1,y],[x-1,y+1],[x,y+1]]};\n\t\t\tif (y === l) return {0:[[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y]]};\n\t\t})\n\t)\n\t// return neighborsByCoords;\n}\n\nexport const makePerson = (properties) => {\n\tconst {initName,initX,initY,initHealth,initInfected,initImmune} = properties;\n\t\n\tconst name = initName ? initName : \"John\";\n\t\n\t// health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\tconst health = initHealth? initHealth : 0;\n\t\n\t// infected is a boolean indicating whether person is infected \n\tconst infected = initInfected ? initInfected : false;\n\t\n\t// immune is a boolean indicating whether person is immune \n\tconst immune = initImmune ? initImmune : false;\n\n\tconst x = initX ? initX : 0;\n\tconst y = initY ? initY : 0;\n\n\treturn {\n\t\tname: name,\n\t\tx: x,\n\t\ty: y,\n\t\thealth: health,\n\t\tinfected: infected,\n\t\tinfectedDays: 0,\n\t\timmunue: immune,\n\t\tcalcInfected: (neighbors,distancing,infectedDays) => {\n\t\t\t// neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n\t\t\t// distancing is a constant >= 1\n\n\t\t\t// console.log(neighbors);\n\t\t\tlet probNotInfected = 1;\n\t\t\tObject.keys(neighbors).forEach(neighborTier => {\n\t\t\t\tconst numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n\t\t\t\t// console.log(numNeighbors);\n\t\t\t\tprobNotInfected = probNotInfected \n\t\t\t\t\t* Math.pow( 1- (PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY,neighborTier) / distancing) , numNeighbors )\n\t\t\t})\n\n\t\t\t// console.log(name + \"'s chance of getting infected = \" + (1-probNotInfected));\n\n\t\t\tif (infectedDays === 0) return Math.random() > probNotInfected;\n\t\t\telse if (infectedDays >= INCUBATION_PERIOD) return false;\n\t\t\telse return true;\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}