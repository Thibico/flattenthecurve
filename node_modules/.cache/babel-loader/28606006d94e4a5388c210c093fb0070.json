{"ast":null,"code":"const btoa = window.btoa;\n\nconst toDataURL = svgText => {\n  return 'data:image/svg+xml;charset=utf-8;base64,' + btoa(encodeURIComponent(svgText).replace(/%([0-9A-F]{2})/g, (match, p1) => String.fromCharCode('0x' + p1)));\n};\n\nconst initCanvas = (svgDataURL, width, height) => {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const image = new window.Image();\n    canvas.width = width;\n    canvas.height = height;\n\n    image.onload = () => {\n      context.drawImage(image, 0, 0);\n      resolve(canvas);\n    };\n\n    image.src = svgDataURL;\n  });\n};\n\nconst privates = new WeakMap();\n\nconst getSVGDataURL = self => {\n  return privates.get(self).svgDataURL;\n};\n\nconst getCanvas = self => {\n  return privates.get(self).canvas;\n};\n\nclass SVGConverter {\n  static load(svgText, width, height) {\n    const dataURL = toDataURL(svgText);\n    return initCanvas(dataURL, width, height).then(canvas => {\n      return new SVGConverter(dataURL, canvas);\n    });\n  }\n\n  static loadFromElement(original) {\n    const {\n      width,\n      height\n    } = original.getBoundingClientRect();\n    const svg = original.cloneNode(true);\n    svg.setAttributeNS(null, 'version', '1.1');\n    svg.setAttributeNS(null, 'width', width);\n    svg.setAttributeNS(null, 'height', height);\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns', 'http://www.w3.org/2000/svg');\n    svg.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n    return SVGConverter.load(svg.outerHTML, width, height);\n  }\n\n  constructor(svgDataURL, canvas) {\n    privates.set(this, {\n      svgDataURL,\n      canvas\n    });\n  }\n\n  svgDataURL() {\n    return getSVGDataURL(this);\n  }\n\n  pngDataURL() {\n    return getCanvas(this).toDataURL('image/png');\n  }\n\n  jpegDataURL() {\n    return getCanvas(this).toDataURL('image/jpeg');\n  }\n\n}\n\nexports.SVGConverter = SVGConverter;","map":null,"metadata":{},"sourceType":"script"}