{"ast":null,"code":"var _jsxFileName = \"/Users/yan/Coding/flattenthecurve/src/components/SimComponent/SimComponent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SimComponent.scss';\nimport { PersonEmoji, condition } from '../../VizHelpers';\nexport default (props => {\n  const numPersons = props.numPersons;\n  const maxPerRow = Math.floor(Math.sqrt(numPersons));\n  const cellWidth = 16;\n\n  const testPrint = world => {\n    // console.log(props);\n    let emojis = []; // [...Array(numPersons).keys()].forEach(i => {\n    //   const drawLot = Math.random()\n    //   let state = \"\"\n    //   if (drawLot > 0.4) state = condition(0)\n    //   else if (drawLot > 0.1) state = condition(1)\n    //   else state = condition(2)\n    //   emojis.push(Person(state,\"population\",Math.floor(i/maxPerRow)/maxPerRow*props.width,(i%maxPerRow)/maxPerRow*props.width))\n    // })\n\n    world.People.forEach((col, x) => {\n      col.forEach((person, y) => {\n        const drawLot = Math.random(); // console.log(person);\n\n        let state = \"\";\n\n        if (person.infected) {\n          if (drawLot > 0.8) state = condition(2);else if (drawLot > 0.2) state = condition(1);else state = condition(1);\n        } else {\n          state = condition(0);\n        }\n\n        emojis.push(Person(state, \"population\", x / maxPerRow * props.width / 2, y / maxPerRow * props.width / 2));\n      });\n    });\n    return emojis; // 🛌🛏🤢💀🤒\n  };\n\n  const Person = (state, location, x, y) => {\n    // console.log(x,y);\n    return React.createElement(\"g\", {\n      key: x * numPersons + y,\n      className: \"person\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"rect\", {\n      width: cellWidth,\n      height: cellWidth,\n      x: x,\n      y: y,\n      fill: \"none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      textAnchor: \"middle\",\n      alignmentBaseline: \"middle\",\n      fill: \"black\",\n      fontSize: cellWidth,\n      x: x + cellWidth / 2,\n      y: y + cellWidth * 1.2 / 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, PersonEmoji(state)));\n  };\n\n  return React.createElement(\"svg\", {\n    className: \"SimComponent\",\n    width: props.width,\n    height: props.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, testPrint(props.worldState)));\n}); // SimComponent.propTypes = {}\n// SimComponent.defaultProps = {}","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/components/SimComponent/SimComponent.js"],"names":["React","PropTypes","styles","PersonEmoji","condition","props","numPersons","maxPerRow","Math","floor","sqrt","cellWidth","testPrint","world","emojis","People","forEach","col","x","person","y","drawLot","random","state","infected","push","Person","width","location","height","worldState"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './SimComponent.scss'\nimport {PersonEmoji,condition} from '../../VizHelpers';\n\n\nexport default (props) => {\n\nconst numPersons = props.numPersons;\nconst maxPerRow = Math.floor(Math.sqrt(numPersons));\nconst cellWidth = 16;\n\nconst testPrint = (world) => {\n  // console.log(props);\n  let emojis = [];\n  // [...Array(numPersons).keys()].forEach(i => {\n  //   const drawLot = Math.random()\n  //   let state = \"\"\n  //   if (drawLot > 0.4) state = condition(0)\n  //   else if (drawLot > 0.1) state = condition(1)\n  //   else state = condition(2)\n  //   emojis.push(Person(state,\"population\",Math.floor(i/maxPerRow)/maxPerRow*props.width,(i%maxPerRow)/maxPerRow*props.width))\n  // })\n\n  world.People.forEach((col,x) => {\n    col.forEach((person,y) => {\n      const drawLot = Math.random()\n      // console.log(person);\n      let state = \"\";\n      if (person.infected) {\n        if (drawLot > 0.8) state = condition(2);\n        else if (drawLot > 0.2) state = condition(1);\n        else state = condition(1);\n      } else {\n        state = condition(0);\n      }\n      emojis.push(Person(state,\"population\",x/maxPerRow*props.width/2,y/maxPerRow*props.width/2));\n    })\n  })\n\n  return emojis;\n  // 🛌🛏🤢💀🤒\n}\n\nconst Person = (state,location,x,y) => {\n  // console.log(x,y);\n  \n  return <g key={x*numPersons+y} className=\"person\">\n    {/* <rect width=\"10\" height=\"110\" style=\"fill:rgb(0,0,0);stroke-width:1;stroke:rgb(0,0,0)\" /> */}\n    <rect width={cellWidth} height={cellWidth} x={x} y={y} fill=\"none\"/>\n    <text\n      textAnchor=\"middle\"\n      alignmentBaseline=\"middle\"\n      fill=\"black\"\n      fontSize={cellWidth}\n      x={x+cellWidth/2}\n      y={y+cellWidth*1.2/2}\n    >\n      {PersonEmoji(state)}\n    </text>\n  </g>\n}\n\nreturn (\n  <svg className=\"SimComponent\" width={props.width} height={props.height}>\n    <g>\n      {testPrint(props.worldState)}\n    </g>\n  </svg>\n);\n}\n// SimComponent.propTypes = {}\n\n// SimComponent.defaultProps = {}\n\n\n"]},"metadata":{},"sourceType":"module"}