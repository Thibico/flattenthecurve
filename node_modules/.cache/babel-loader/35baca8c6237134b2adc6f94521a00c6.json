{"ast":null,"code":"var _jsxFileName = \"/Users/yan/Coding/flattenthecurve/src/components/SimComponent/SimComponent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SimComponent.scss';\nimport { PersonEmoji, condition } from '../../VizHelpers';\nexport default (props => {\n  const numPersons = props.numPersons;\n  const maxPerRow = Math.floor(Math.sqrt(numPersons));\n  const cellWidth = 15;\n\n  const testPrint = () => {\n    console.log(props);\n    let emojis = [];\n    [...Array(numPersons).keys()].forEach(i => {\n      const drawLot = Math.random();\n      let state = \"\";\n      if (drawLot > 0.4) state = condition(0);else if (drawLot > 0.1) state = condition(1);else state = condition(2);\n      emojis.push(Person(state, \"population\", Math.floor(i / maxPerRow) / maxPerRow * props.width, i % maxPerRow / maxPerRow * props.width));\n    }); // [...Array(1000).keys()].map(i => console.log(i))\n\n    return emojis; // 🛌🛏🤢💀🤒\n  };\n\n  const Person = (state, location, x, y) => {\n    // console.log(x,y);\n    return React.createElement(\"g\", {\n      key: x * numPersons + y,\n      className: \"person\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"rect\", {\n      width: cellWidth,\n      height: cellWidth,\n      x: x,\n      y: y,\n      fill: \"rgba(0,0,125.0.5)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      textAnchor: \"middle\",\n      alignmentBaseline: \"middle\",\n      fill: \"black\",\n      fontSize: cellWidth,\n      x: x + cellWidth / 2,\n      y: y * 1.05 + cellWidth / 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, PersonEmoji(state)));\n  };\n\n  return React.createElement(\"svg\", {\n    className: \"SimComponent\",\n    width: props.width,\n    height: props.height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, testPrint()));\n}); // SimComponent.propTypes = {}\n// SimComponent.defaultProps = {}","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/components/SimComponent/SimComponent.js"],"names":["React","PropTypes","styles","PersonEmoji","condition","props","numPersons","maxPerRow","Math","floor","sqrt","cellWidth","testPrint","console","log","emojis","Array","keys","forEach","i","drawLot","random","state","push","Person","width","location","x","y","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,WAAR,EAAoBC,SAApB,QAAoC,kBAApC;AAGA,gBAAgBC,KAAD,IAAW;AAE1B,QAAMC,UAAU,GAAGD,KAAK,CAACC,UAAzB;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUJ,UAAV,CAAX,CAAlB;AACA,QAAMK,SAAS,GAAG,EAAlB;;AAEA,QAAMC,SAAS,GAAG,MAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA,QAAIU,MAAM,GAAG,EAAb;AACA,KAAC,GAAGC,KAAK,CAACV,UAAD,CAAL,CAAkBW,IAAlB,EAAJ,EAA8BC,OAA9B,CAAsCC,CAAC,IAAI;AACzC,YAAMC,OAAO,GAAGZ,IAAI,CAACa,MAAL,EAAhB;AACA,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIF,OAAO,GAAG,GAAd,EAAmBE,KAAK,GAAGlB,SAAS,CAAC,CAAD,CAAjB,CAAnB,KACK,IAAIgB,OAAO,GAAG,GAAd,EAAmBE,KAAK,GAAGlB,SAAS,CAAC,CAAD,CAAjB,CAAnB,KACAkB,KAAK,GAAGlB,SAAS,CAAC,CAAD,CAAjB;AACLW,MAAAA,MAAM,CAACQ,IAAP,CAAYC,MAAM,CAACF,KAAD,EAAO,YAAP,EAAoBd,IAAI,CAACC,KAAL,CAAWU,CAAC,GAACZ,SAAb,IAAwBA,SAAxB,GAAkCF,KAAK,CAACoB,KAA5D,EAAmEN,CAAC,GAACZ,SAAH,GAAcA,SAAd,GAAwBF,KAAK,CAACoB,KAAhG,CAAlB;AACD,KAPD,EAHsB,CAWtB;;AAEA,WAAOV,MAAP,CAbsB,CActB;AACD,GAfD;;AAiBA,QAAMS,MAAM,GAAG,CAACF,KAAD,EAAOI,QAAP,EAAgBC,CAAhB,EAAkBC,CAAlB,KAAwB;AACrC;AAEA,WAAO;AAAG,MAAA,GAAG,EAAED,CAAC,GAACrB,UAAF,GAAasB,CAArB;AAAwB,MAAA,SAAS,EAAC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AAAM,MAAA,KAAK,EAAEjB,SAAb;AAAwB,MAAA,MAAM,EAAEA,SAAhC;AAA2C,MAAA,CAAC,EAAEgB,CAA9C;AAAiD,MAAA,CAAC,EAAEC,CAApD;AAAuD,MAAA,IAAI,EAAC,mBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,EAGL;AACE,MAAA,UAAU,EAAC,QADb;AAEE,MAAA,iBAAiB,EAAC,QAFpB;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,QAAQ,EAAEjB,SAJZ;AAKE,MAAA,CAAC,EAAEgB,CAAC,GAAChB,SAAS,GAAC,CALjB;AAME,MAAA,CAAC,EAAEiB,CAAC,GAAC,IAAF,GAAOjB,SAAS,GAAC,CANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQGR,WAAW,CAACmB,KAAD,CARd,CAHK,CAAP;AAcD,GAjBD;;AAmBA,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAEjB,KAAK,CAACoB,KAA3C;AAAkD,IAAA,MAAM,EAAEpB,KAAK,CAACwB,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,SAAS,EADZ,CADF,CADF;AAOC,CAjDD,E,CAkDA;AAEA","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './SimComponent.scss'\nimport {PersonEmoji,condition} from '../../VizHelpers';\n\n\nexport default (props) => {\n\nconst numPersons = props.numPersons;\nconst maxPerRow = Math.floor(Math.sqrt(numPersons));\nconst cellWidth = 15;\n\nconst testPrint = () => {\n  console.log(props);\n  let emojis = [];\n  [...Array(numPersons).keys()].forEach(i => {\n    const drawLot = Math.random()\n    let state = \"\"\n    if (drawLot > 0.4) state = condition(0)\n    else if (drawLot > 0.1) state = condition(1)\n    else state = condition(2)\n    emojis.push(Person(state,\"population\",Math.floor(i/maxPerRow)/maxPerRow*props.width,(i%maxPerRow)/maxPerRow*props.width))\n  })\n  // [...Array(1000).keys()].map(i => console.log(i))\n  \n  return emojis;\n  // 🛌🛏🤢💀🤒\n}\n\nconst Person = (state,location,x,y) => {\n  // console.log(x,y);\n  \n  return <g key={x*numPersons+y} className=\"person\">\n    {/* <rect width=\"10\" height=\"110\" style=\"fill:rgb(0,0,0);stroke-width:1;stroke:rgb(0,0,0)\" /> */}\n    <rect width={cellWidth} height={cellWidth} x={x} y={y} fill=\"rgba(0,0,125.0.5)\"/>\n    <text\n      textAnchor=\"middle\"\n      alignmentBaseline=\"middle\"\n      fill=\"black\"\n      fontSize={cellWidth}\n      x={x+cellWidth/2}\n      y={y*1.05+cellWidth/2}\n    >\n      {PersonEmoji(state)}\n    </text>\n  </g>\n}\n\nreturn (\n  <svg className=\"SimComponent\" width={props.width} height={props.height}>\n    <g>\n      {testPrint()}\n    </g>\n  </svg>\n);\n}\n// SimComponent.propTypes = {}\n\n// SimComponent.defaultProps = {}\n\n\n"]},"metadata":{},"sourceType":"module"}