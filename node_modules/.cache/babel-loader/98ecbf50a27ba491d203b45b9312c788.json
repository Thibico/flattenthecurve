{"ast":null,"code":"import { cloneElement } from \"react\";\nexport const PROB_INFECTION = 0.3;\nexport const PROB_INFECTION_DECAY = 0.9;\nexport const getNextStateOfWorld = currentState => {\n  // currentState is an object consisting of\n  // People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n  // \n  const width = currentState.People.length;\n  currentState.People.forEach(col => {\n    currentState.People[col].forEach(row => {\n      currentState.People[col][row].calcInfected();\n    });\n  });\n};\nexport const getAllNeighbors = width => {\n  l = width - 1; // last index\n\n  let neighborsByCoords = [...Array(width).keys()].map(y => [...Array(width).keys()].map(x => {\n    if (x < width && y < width && x > 0 && y > 0) return [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]];\n    if (x == 0 && y == 0) return [[1, 0], [1, 1], [0, 1]];\n    if (x == 0 && y == l) return [[0, l - 1], [1, l - 1], [1, l]];\n    if (x == l && y == 0) return [[l - 1, 0], [l - 1, 1], [l, 1]];\n    if (x == l && y == l) return [[l - 1, l - 1], [l - 1, l], [l, l - 1]];\n    if (x == 0) return [[x, y - 1], [x + 1, y - 1], [x + 1, y], [x, y + 1], [x + 1, y + 1]];\n    if (y == 0) return [[x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]];\n    if (x == l) return [[x - 1, y - 1], [x, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1]];\n    if (y == l) return [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y]];\n  }));\n  console.log(neighborsByCoords);\n};\nexport const makePerson = (initName, initHealth, initInfected, initImmune) => {\n  const name = initName ? initName : \"John\"; // health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\n  const health = initHealth ? initHealth : 0; // infected is a boolean indicating whether person is infected \n\n  const infected = !!initInfected ? true : false; // immune is a boolean indicating whether person is immune \n\n  const immune = !!initImmune ? true : false;\n  return {\n    name: name,\n    health: health,\n    infected: infected,\n    immunue: immune,\n    calcInfected: (neighbors, distancing) => {\n      // neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n      // distancing is a constant >= 1\n      let probNotInfected = 1;\n      Object.keys(neighbors).forEach(neighborTier => {\n        const numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n        probNotInfected = probNotInfected * Math.pow(1 - PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY, neighborTier) / distancing, numNeighbors);\n      });\n      console.log(name + \"'s chance of getting infected = \" + (1 - probNotInfected));\n      return Math.random() < probNotInfected;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/Simulate.js"],"names":["cloneElement","PROB_INFECTION","PROB_INFECTION_DECAY","getNextStateOfWorld","currentState","width","People","length","forEach","col","row","calcInfected","getAllNeighbors","l","neighborsByCoords","Array","keys","map","y","x","console","log","makePerson","initName","initHealth","initInfected","initImmune","name","health","infected","immune","immunue","neighbors","distancing","probNotInfected","Object","neighborTier","numNeighbors","filter","neighbor","Math","pow","random"],"mappings":"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","sourcesContent":["import { cloneElement } from \"react\";\n\nexport const PROB_INFECTION = 0.3\nexport const PROB_INFECTION_DECAY = 0.9\n\n\nexport const getNextStateOfWorld = (currentState) => {\n\t// currentState is an object consisting of\n\t// People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n\t// \n\n\tconst width = currentState.People.length;\n\n\tcurrentState.People.forEach(col => {\n\t\tcurrentState.People[col].forEach(row => {\n\t\t\tcurrentState.People[col][row].calcInfected()\n\t\t})\n\t})\n\n}\n\nexport const getAllNeighbors = (width) => {\n\tl = width-1; // last index\n\tlet neighborsByCoords = [...Array(width).keys()].map(y =>\n\t\t[...Array(width).keys()].map(x => {\n\t\t\tif (x < width && y < width && x > 0 && y > 0 ) return [[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]];\n\t\t\tif (x == 0 && y == 0) return [[1,0],[1,1],[0,1]];  \n\t\t\tif (x == 0 && y == l) return [[0,l-1],[1,l-1],[1,l]];  \n\t\t\tif (x == l && y == 0) return [[l-1,0],[l-1,1],[l,1]];  \n\t\t\tif (x == l && y == l) return [[l-1,l-1],[l-1,l],[l,l-1]];  \n\t\t\tif (x == 0) return [[x,y-1],[x+1,y-1],[x+1,y],[x,y+1],[x+1,y+1]];\n\t\t\tif (y == 0) return [[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]];\n\t\t\tif (x == l) return [[x-1,y-1],[x,y-1],[x-1,y],[x-1,y+1],[x,y+1]];\n\t\t\tif (y == l) return [[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y]];\n\t\t})\n\t)\n\tconsole.log(neighborsByCoords);\n}\n\nexport const makePerson = (initName,initHealth,initInfected,initImmune) => {\n\tconst name = initName ? initName : \"John\";\n\t\n\t// health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\tconst health = initHealth? initHealth : 0;\n\t\n\t// infected is a boolean indicating whether person is infected \n\tconst infected = !!initInfected ? true : false;\n\t\n\t// immune is a boolean indicating whether person is immune \n\tconst immune = !!initImmune ? true : false;\n\n\n\treturn {\n\t\tname: name,\n\t\thealth: health,\n\t\tinfected: infected,\n\t\timmunue: immune,\n\t\tcalcInfected: (neighbors,distancing) => {\n\t\t\t// neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n\t\t\t// distancing is a constant >= 1\n\n\t\t\tlet probNotInfected = 1;\n\t\t\tObject.keys(neighbors).forEach(neighborTier => {\n\t\t\t\tconst numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n\t\t\t\tprobNotInfected = probNotInfected \n\t\t\t\t\t* Math.pow( 1- (PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY,neighborTier) / distancing) , numNeighbors )\n\t\t\t})\n\n\t\t\tconsole.log(name + \"'s chance of getting infected = \" + (1-probNotInfected));\n\n\t\t\treturn Math.random() < probNotInfected;\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}