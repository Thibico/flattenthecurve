{"ast":null,"code":"import { cloneElement } from \"react\";\nexport const PROB_INFECTION = 0.3;\nexport const PROB_INFECTION_DECAY = 0.9;\nexport const newWorld = width => {\n  return {\n    People: [...Array(width).keys()].map(x => [...Array(width).keys()].map(y => {\n      return makePerson({\n        initX: x,\n        initY: y\n      });\n    }))\n  };\n};\nexport const getNextStateOfWorld = (currentState, neighborAddresses) => {\n  // currentState is an object consisting of\n  // People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n  // \n  const width = currentState.People.length;\n  const People = currentState.People;\n  console.log(People);\n  People.forEach((col, x) => {\n    col.forEach((row, y) => {\n      row.infected = People[x][y].calcInfected(getNeighborsForPerson(People[x][y], People, neighborAddresses), 1);\n    });\n  });\n  return {\n    People: People\n  };\n};\nexport const getNeighborsForPerson = (person, AllPeople, neighborAddresses) => {\n  console.log(person);\n  console.log(neighborAddresses);\n  return {\n    0: neighborAddresses[person.x][person.y][0].map(address => {\n      console.log(address);\n      return AllPeople[address[0]][address[1]];\n    })\n  };\n};\nexport const getAllNeighbors = width => {\n  const l = width - 1; // last index\n\n  return [...Array(width).keys()].map(x => [...Array(width).keys()].map(y => {\n    if (x < l && y < l && x > 0 && y > 0) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (x === 0 && y === 0) return {\n      0: [[1, 0], [1, 1], [0, 1]]\n    };\n    if (x === 0 && y === l) return {\n      0: [[0, l - 1], [1, l - 1], [1, l]]\n    };\n    if (x === l && y === 0) return {\n      0: [[l - 1, 0], [l - 1, 1], [l, 1]]\n    };\n    if (x === l && y === l) return {\n      0: [[l - 1, l - 1], [l - 1, l], [l, l - 1]]\n    };\n    if (x === 0) return {\n      0: [[x, y - 1], [x + 1, y - 1], [x + 1, y], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (y === 0) return {\n      0: [[x - 1, y], [x + 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]]\n    };\n    if (x === l) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1]]\n    };\n    if (y === l) return {\n      0: [[x - 1, y - 1], [x, y - 1], [x + 1, y - 1], [x - 1, y], [x + 1, y]]\n    };\n  })); // return neighborsByCoords;\n};\nexport const makePerson = properties => {\n  const {\n    initName,\n    initX,\n    initY,\n    initHealth,\n    initInfected,\n    initImmune\n  } = properties;\n  const name = initName ? initName : \"John\"; // health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\n  const health = initHealth ? initHealth : 0; // infected is a boolean indicating whether person is infected \n\n  const infected = !!initInfected ? true : false; // immune is a boolean indicating whether person is immune \n\n  const immune = !!initImmune ? true : false;\n  const x = initX ? initX : 0;\n  const y = initY ? initY : 0;\n  return {\n    name: name,\n    x: x,\n    y: y,\n    health: health,\n    infected: infected,\n    immunue: immune,\n    calcInfected: (neighbors, distancing) => {\n      // neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n      // distancing is a constant >= 1\n      console.log(neighbors);\n      let probNotInfected = 1;\n      Object.keys(neighbors).forEach(neighborTier => {\n        const numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n        probNotInfected = probNotInfected * Math.pow(1 - PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY, neighborTier) / distancing, numNeighbors);\n      });\n      console.log(name + \"'s chance of getting infected = \" + (1 - probNotInfected));\n      return Math.random() < probNotInfected;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/yan/Coding/flattenthecurve/src/Simulate.js"],"names":["cloneElement","PROB_INFECTION","PROB_INFECTION_DECAY","newWorld","width","People","Array","keys","map","x","y","makePerson","initX","initY","getNextStateOfWorld","currentState","neighborAddresses","length","console","log","forEach","col","row","infected","calcInfected","getNeighborsForPerson","person","AllPeople","address","getAllNeighbors","l","properties","initName","initHealth","initInfected","initImmune","name","health","immune","immunue","neighbors","distancing","probNotInfected","Object","neighborTier","numNeighbors","filter","neighbor","Math","pow","random"],"mappings":"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","sourcesContent":["import { cloneElement } from \"react\";\n\nexport const PROB_INFECTION = 0.3\nexport const PROB_INFECTION_DECAY = 0.9\n\n\nexport const newWorld = (width) => {\n\treturn {\n\t\tPeople: [...Array(width).keys()].map(x =>\n\t\t\t\t[...Array(width).keys()].map(y => {\n\t\t\t\t\treturn makePerson({initX:x,initY:y})\n\t\t\t\t})\n\t\t\t)\n\t}\n}\n\nexport const getNextStateOfWorld = (currentState,neighborAddresses) => {\n\t// currentState is an object consisting of\n\t// People: list of list of Persons, i.e. Persons[x][y] gives you the person at x,y\n\t// \n\n\tconst width = currentState.People.length;\n\tconst People = currentState.People;\n\n\tconsole.log(People);\n\n\tPeople.forEach((col,x) => {\n\t\tcol.forEach((row,y) => {\n\t\t\trow.infected = People[x][y].calcInfected(\n\t\t\t\t\tgetNeighborsForPerson(People[x][y],People,neighborAddresses),\n\t\t\t\t\t1\n\t\t\t\t)\n\t\t})\n\t})\n\n\treturn {People:People}\n}\n\nexport const getNeighborsForPerson = (person,AllPeople,neighborAddresses) => {\n\tconsole.log(person);\n\tconsole.log(neighborAddresses);\n\treturn {\n\t\t0: neighborAddresses[person.x][person.y][0].map(address => {\n\t\t\t\tconsole.log(address);\n\t\t\t\treturn AllPeople[address[0]][address[1]];\n\t\t\t})\n\t};\n}\n\nexport const getAllNeighbors = (width) => {\n\tconst l = width-1; // last index\n\treturn [...Array(width).keys()].map(x =>\n\t\t[...Array(width).keys()].map(y => {\n\t\t\tif (x < l && y < l && x > 0 && y > 0 ) return {0:[[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]]};\n\t\t\tif (x === 0 && y === 0) return {0:[[1,0],[1,1],[0,1]]};  \n\t\t\tif (x === 0 && y === l) return {0:[[0,l-1],[1,l-1],[1,l]]};  \n\t\t\tif (x === l && y === 0) return {0:[[l-1,0],[l-1,1],[l,1]]};  \n\t\t\tif (x === l && y === l) return {0:[[l-1,l-1],[l-1,l],[l,l-1]]};  \n\t\t\tif (x === 0) return {0:[[x,y-1],[x+1,y-1],[x+1,y],[x,y+1],[x+1,y+1]]};\n\t\t\tif (y === 0) return {0:[[x-1,y],[x+1,y],[x-1,y+1],[x,y+1],[x+1,y+1]]};\n\t\t\tif (x === l) return {0:[[x-1,y-1],[x,y-1],[x-1,y],[x-1,y+1],[x,y+1]]};\n\t\t\tif (y === l) return {0:[[x-1,y-1],[x,y-1],[x+1,y-1],[x-1,y],[x+1,y]]};\n\t\t})\n\t)\n\t// return neighborsByCoords;\n}\n\nexport const makePerson = (properties) => {\n\tconst {initName,initX,initY,initHealth,initInfected,initImmune} = properties;\n\tconst name = initName ? initName : \"John\";\n\t\n\t// health indicates whether person is normal, showing mild symptons, severe symptoms, or dead\n\tconst health = initHealth? initHealth : 0;\n\t\n\t// infected is a boolean indicating whether person is infected \n\tconst infected = !!initInfected ? true : false;\n\t\n\t// immune is a boolean indicating whether person is immune \n\tconst immune = !!initImmune ? true : false;\n\n\tconst x = initX ? initX : 0;\n\tconst y = initY ? initY : 0;\n\n\treturn {\n\t\tname: name,\n\t\tx: x,\n\t\ty: y,\n\t\thealth: health,\n\t\tinfected: infected,\n\t\timmunue: immune,\n\t\tcalcInfected: (neighbors,distancing) => {\n\t\t\t// neighbors is an object with different tiers of neighbors lists 0 is closest, 1 is next closest, etc\n\t\t\t// distancing is a constant >= 1\n\n\t\t\tconsole.log(neighbors);\n\t\t\tlet probNotInfected = 1;\n\t\t\tObject.keys(neighbors).forEach(neighborTier => {\n\t\t\t\tconst numNeighbors = neighbors[neighborTier].filter(neighbor => neighbor.infected).length;\n\t\t\t\tprobNotInfected = probNotInfected \n\t\t\t\t\t* Math.pow( 1- (PROB_INFECTION * Math.pow(PROB_INFECTION_DECAY,neighborTier) / distancing) , numNeighbors )\n\t\t\t})\n\n\t\t\tconsole.log(name + \"'s chance of getting infected = \" + (1-probNotInfected));\n\n\t\t\treturn Math.random() < probNotInfected;\n\t\t}\n\t}\n}"]},"metadata":{},"sourceType":"module"}